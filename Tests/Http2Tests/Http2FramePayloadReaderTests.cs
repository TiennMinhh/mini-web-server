using Microsoft.Extensions.Logging.Abstractions;
using MiniWebServer.Server.ProtocolHandlers.Http2;
using System;
using System.Buffers;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Http2Tests
{
    public class Http2FramePayloadReaderTests
    {
        [Fact]
        public void TryReadHEADERSFramePayload_ValidPayload_ReturnsTrueAndHeadersPayload()
        {
            // Arrange
            var frame = new Http2Frame();
            var payload = new ReadOnlySequence<byte>([0x82, 0x86, 0x84, 0x41, 0x8c, 0xf1, 0xe3, 0xc2, 0xe5, 0xf2, 0x3a, 0x6b, 0xa0, 0xab, 0x90, 0xf4, 0xff]);
            var headerTable = new HPACKHeaderTable();
            var logger = NullLogger.Instance;
            Http2FrameHEADERSPayload headersPayload;

            // Act
            var result = Http2FrameReader.TryReadHEADERSFramePayload(ref frame, payload, headerTable, out headersPayload, logger);

            // Assert
            Assert.True(result);
            Assert.NotNull(headersPayload);
            Assert.Equal(4, headersPayload.Headers.Count);
            Assert.Equal(":method", headersPayload.Headers[0].Name);
            Assert.Equal("GET", headersPayload.Headers[0].Value);
            Assert.Equal(":scheme", headersPayload.Headers[1].Name);
            Assert.Equal("http", headersPayload.Headers[1].Value);
            Assert.Equal(":path", headersPayload.Headers[2].Name);
            Assert.Equal("/", headersPayload.Headers[2].Value);
            Assert.Equal(":authority", headersPayload.Headers[3].Name);
            Assert.Equal("www.example.com", headersPayload.Headers[3].Value);
        }

        [Fact]
        public void TryReadHEADERSFramePayload_LongValidPayload_1_ReturnsTrueAndHeadersPayload()
        {
            // Arrange
            var frame = new Http2Frame();
            var buffer = new ReadOnlySequence<byte>([0x0, 0x0, 0x27, 0x1, 0x5, 0x0, 0x0, 0x0, 0x1, 0x82, 0x86, 0x1, 0xe, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x39, 0x36, 0x35, 0x32, 0x84, 0xf, 0x1, 0x11, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x62, 0x72]);
            var headerTable = new HPACKHeaderTable();
            var maxFrameSize = 1024u;
            var logger = NullLogger.Instance;
            Http2FrameHEADERSPayload headersPayload;

            // Act
            var result = Http2FrameReader.TryReadFrame(ref buffer, ref frame, maxFrameSize, out ReadOnlySequence<byte> payload);

            // Assert
            Assert.True(result);
            Assert.Equal(Http2FrameType.HEADERS, frame.FrameType);
            Assert.Equal(Http2FrameFlags.END_STREAM | Http2FrameFlags.END_HEADERS, frame.Flags);
            Assert.Equal(39, frame.Length);
            Assert.Equal(1u, frame.StreamIdentifier);
            Assert.Equal(frame.Length, payload.Length);

            result = Http2FrameReader.TryReadHEADERSFramePayload(ref frame, payload, headerTable, out headersPayload, logger);

            // Assert
            Assert.True(result);
            Assert.NotNull(headersPayload);
            Assert.Equal(5, headersPayload.Headers.Count);
            Assert.Equal(":method", headersPayload.Headers[0].Name);
            Assert.Equal("GET", headersPayload.Headers[0].Value);
            Assert.Equal(":scheme", headersPayload.Headers[1].Name);
            Assert.Equal("http", headersPayload.Headers[1].Value);
            Assert.Equal(":authority", headersPayload.Headers[2].Name);
            Assert.Equal("localhost:9652", headersPayload.Headers[2].Value);
            Assert.Equal(":path", headersPayload.Headers[3].Name);
            Assert.Equal("/", headersPayload.Headers[3].Value);
            Assert.Equal("accept-encoding", headersPayload.Headers[4].Name);
            Assert.Equal("gzip, deflate, br", headersPayload.Headers[4].Value);
        }

        [Fact]
        public void TryReadHEADERSFramePayload_LongValidPayload_2_ReturnsTrueAndHeadersPayload()
        {
            // Arrange
            var frame = new Http2Frame();
            var buffer = new ReadOnlySequence<byte>([0x0, 0x4, 0x35, 0x1, 0x5, 0x0, 0x0, 0x0, 0x1, 0x82, 0x86, 0x1, 0xe, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x39, 0x36, 0x35, 0x32, 0x84, 0x0, 0xe, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x31, 0x7f, 0xf5, 0x2, 0x34, 0x31, 0x35, 0x6b, 0x33, 0x57, 0x5a, 0x51, 0x55, 0x52, 0x72, 0x59, 0x72, 0x65, 0x6a, 0x6d, 0x74, 0x67, 0x41, 0x57, 0x6a, 0x57, 0x4b, 0x5a, 0x42, 0x48, 0x77, 0x50, 0x71, 0x6b, 0x30, 0x72, 0x37, 0x58, 0x63, 0x52, 0x56, 0x77, 0x77, 0x6e, 0x41, 0x69, 0x45, 0x72, 0x34, 0x74, 0x46, 0x43, 0x44, 0x36, 0x72, 0x32, 0x66, 0x61, 0x51, 0x70, 0x42, 0x5a, 0x5a, 0x55, 0x46, 0x51, 0x39, 0x78, 0x6e, 0x52, 0x55, 0x4d, 0x4b, 0x46, 0x38, 0x30, 0x41, 0x58, 0x45, 0x78, 0x31, 0x6a, 0x43, 0x46, 0x4d, 0x30, 0x66, 0x75, 0x50, 0x65, 0x35, 0x77, 0x33, 0x61, 0x64, 0x58, 0x58, 0x33, 0x78, 0x4d, 0x36, 0x6d, 0x63, 0x45, 0x56, 0x70, 0x36, 0x46, 0x74, 0x72, 0x33, 0x6b, 0x45, 0x41, 0x4b, 0x32, 0x6d, 0x33, 0x69, 0x75, 0x34, 0x76, 0x4b, 0x78, 0x44, 0x32, 0x4c, 0x48, 0x76, 0x62, 0x4a, 0x66, 0x51, 0x34, 0x4c, 0x6d, 0x55, 0x6b, 0x43, 0x79, 0x68, 0x31, 0x68, 0x53, 0x75, 0x67, 0x32, 0x4a, 0x55, 0x6b, 0x54, 0x59, 0x67, 0x39, 0x65, 0x47, 0x74, 0x4b, 0x61, 0x44, 0x75, 0x35, 0x52, 0x37, 0x50, 0x32, 0x5a, 0x67, 0x59, 0x77, 0x59, 0x36, 0x51, 0x58, 0x4e, 0x53, 0x76, 0x38, 0x63, 0x34, 0x70, 0x62, 0x4b, 0x4b, 0x37, 0x4e, 0x65, 0x4b, 0x45, 0x63, 0x48, 0x37, 0x45, 0x6d, 0x39, 0x31, 0x4c, 0x4a, 0x46, 0x78, 0x71, 0x6a, 0x71, 0x46, 0x69, 0x57, 0x64, 0x6d, 0x74, 0x45, 0x79, 0x65, 0x30, 0x52, 0x33, 0x48, 0x67, 0x4c, 0x35, 0x47, 0x50, 0x64, 0x38, 0x30, 0x64, 0x65, 0x78, 0x43, 0x62, 0x59, 0x34, 0x42, 0x44, 0x61, 0x70, 0x4a, 0x31, 0x32, 0x46, 0x37, 0x75, 0x33, 0x4b, 0x65, 0x6d, 0x70, 0x78, 0x30, 0x34, 0x78, 0x70, 0x52, 0x41, 0x78, 0x65, 0x57, 0x70, 0x4e, 0x7a, 0x35, 0x66, 0x61, 0x76, 0x6b, 0x38, 0x38, 0x34, 0x41, 0x71, 0x4b, 0x48, 0x70, 0x45, 0x67, 0x43, 0x46, 0x33, 0x6e, 0x38, 0x75, 0x42, 0x30, 0x6a, 0x78, 0x59, 0x4d, 0x78, 0x53, 0x6a, 0x59, 0x53, 0x33, 0x71, 0x6e, 0x58, 0x55, 0x67, 0x66, 0x39, 0x53, 0x58, 0x66, 0x5a, 0x59, 0x4c, 0x39, 0x67, 0x53, 0x77, 0x68, 0x4e, 0x34, 0x71, 0x39, 0x79, 0x4a, 0x55, 0x39, 0x55, 0x54, 0x33, 0x33, 0x55, 0x6e, 0x61, 0x38, 0x61, 0x79, 0x37, 0x44, 0x52, 0x64, 0x37, 0x44, 0x71, 0x30, 0x53, 0x6a, 0x37, 0x4b, 0x51, 0x50, 0x31, 0x52, 0x32, 0x63, 0x4d, 0x58, 0x44, 0x69, 0x69, 0x4a, 0x4d, 0x6d, 0x30, 0x56, 0x51, 0x55, 0x4a, 0x4c, 0x58, 0x64, 0x4b, 0x4e, 0x72, 0x53, 0x75, 0x58, 0x53, 0x5a, 0x67, 0x38, 0x47, 0x4d, 0x61, 0x32, 0x61, 0x58, 0x48, 0x72, 0x6d, 0x69, 0x43, 0x77, 0x55, 0x56, 0x4c, 0x30, 0x48, 0x6e, 0x46, 0x6e, 0x30, 0x53, 0x67, 0x33, 0x74, 0x74, 0x77, 0x45, 0x4b, 0x39, 0x62, 0x37, 0x39, 0x6b, 0x63, 0x51, 0x76, 0x4c, 0x71, 0x70, 0x6d, 0x36, 0x6e, 0x52, 0x63, 0x35, 0x41, 0x62, 0x54, 0x77, 0x51, 0x57, 0x48, 0x44, 0x62, 0x4e, 0x64, 0x76, 0x65, 0x4d, 0x6d, 0x61, 0x33, 0x4e, 0x68, 0x48, 0x4d, 0x77, 0x4a, 0x52, 0x72, 0x77, 0x75, 0x66, 0x4e, 0x43, 0x4d, 0x47, 0x76, 0x61, 0x54, 0x71, 0x42, 0x6e, 0x51, 0x45, 0x38, 0x56, 0x38, 0x35, 0x56, 0x59, 0x71, 0x43, 0x78, 0x79, 0x6e, 0x67, 0x71, 0x31, 0x77, 0x41, 0x71, 0x67, 0x47, 0x56, 0x6d, 0x48, 0x78, 0x58, 0x69, 0x38, 0x59, 0x78, 0x75, 0x37, 0x43, 0x36, 0x5a, 0x69, 0x59, 0x44, 0x69, 0x59, 0x66, 0x71, 0x55, 0x6b, 0x61, 0x39, 0x46, 0x41, 0x0, 0xe, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x7f, 0xf5, 0x2, 0x30, 0x76, 0x36, 0x47, 0x45, 0x32, 0x78, 0x58, 0x36, 0x4b, 0x6b, 0x46, 0x79, 0x38, 0x4d, 0x76, 0x31, 0x77, 0x4a, 0x34, 0x6a, 0x61, 0x53, 0x34, 0x57, 0x54, 0x52, 0x6a, 0x75, 0x76, 0x6e, 0x59, 0x6a, 0x33, 0x32, 0x44, 0x53, 0x33, 0x57, 0x72, 0x6d, 0x6e, 0x48, 0x53, 0x44, 0x4b, 0x37, 0x57, 0x75, 0x76, 0x7a, 0x64, 0x76, 0x53, 0x77, 0x56, 0x64, 0x6a, 0x32, 0x68, 0x38, 0x67, 0x75, 0x77, 0x4e, 0x6b, 0x39, 0x64, 0x37, 0x48, 0x65, 0x32, 0x58, 0x53, 0x66, 0x71, 0x74, 0x54, 0x50, 0x44, 0x7a, 0x52, 0x65, 0x59, 0x51, 0x6b, 0x64, 0x35, 0x6a, 0x51, 0x42, 0x66, 0x4d, 0x65, 0x74, 0x43, 0x44, 0x64, 0x76, 0x64, 0x68, 0x39, 0x52, 0x50, 0x55, 0x66, 0x54, 0x71, 0x7a, 0x6a, 0x74, 0x31, 0x48, 0x54, 0x57, 0x4e, 0x38, 0x62, 0x51, 0x65, 0x75, 0x52, 0x64, 0x4b, 0x71, 0x4e, 0x36, 0x77, 0x51, 0x76, 0x48, 0x66, 0x45, 0x6b, 0x70, 0x69, 0x63, 0x58, 0x5a, 0x48, 0x55, 0x44, 0x32, 0x79, 0x46, 0x7a, 0x68, 0x61, 0x33, 0x68, 0x39, 0x56, 0x30, 0x7a, 0x42, 0x72, 0x4c, 0x78, 0x55, 0x78, 0x56, 0x42, 0x76, 0x4a, 0x67, 0x45, 0x39, 0x38, 0x66, 0x76, 0x46, 0x36, 0x79, 0x4d, 0x77, 0x59, 0x68, 0x4a, 0x4e, 0x53, 0x58, 0x55, 0x54, 0x72, 0x4a, 0x4c, 0x6a, 0x63, 0x54, 0x47, 0x68, 0x36, 0x65, 0x67, 0x53, 0x43, 0x51, 0x7a, 0x67, 0x4c, 0x6d, 0x52, 0x57, 0x6b, 0x72, 0x41, 0x41, 0x6d, 0x75, 0x77, 0x74, 0x39, 0x36, 0x6e, 0x58, 0x38, 0x74, 0x61, 0x6b, 0x47, 0x48, 0x76, 0x75, 0x31, 0x76, 0x74, 0x69, 0x78, 0x48, 0x36, 0x39, 0x54, 0x34, 0x69, 0x65, 0x65, 0x4a, 0x30, 0x54, 0x39, 0x30, 0x67, 0x74, 0x42, 0x4d, 0x63, 0x45, 0x43, 0x38, 0x4e, 0x77, 0x55, 0x54, 0x52, 0x75, 0x6a, 0x35, 0x4b, 0x59, 0x62, 0x4c, 0x51, 0x74, 0x41, 0x33, 0x4e, 0x4b, 0x34, 0x45, 0x75, 0x50, 0x6e, 0x50, 0x32, 0x4b, 0x6e, 0x76, 0x65, 0x50, 0x38, 0x54, 0x58, 0x50, 0x54, 0x6e, 0x4d, 0x32, 0x76, 0x63, 0x62, 0x56, 0x55, 0x41, 0x41, 0x6b, 0x31, 0x44, 0x50, 0x30, 0x37, 0x32, 0x57, 0x72, 0x45, 0x36, 0x44, 0x54, 0x42, 0x70, 0x44, 0x74, 0x77, 0x65, 0x43, 0x6a, 0x33, 0x38, 0x48, 0x38, 0x74, 0x4d, 0x5a, 0x48, 0x79, 0x44, 0x42, 0x46, 0x43, 0x58, 0x75, 0x63, 0x44, 0x6b, 0x36, 0x6b, 0x44, 0x76, 0x57, 0x57, 0x57, 0x46, 0x45, 0x51, 0x76, 0x58, 0x68, 0x55, 0x37, 0x76, 0x69, 0x39, 0x30, 0x56, 0x67, 0x48, 0x42, 0x78, 0x6b, 0x65, 0x4e, 0x65, 0x67, 0x7a, 0x36, 0x6b, 0x32, 0x62, 0x41, 0x43, 0x59, 0x41, 0x76, 0x38, 0x6b, 0x66, 0x64, 0x76, 0x45, 0x30, 0x75, 0x61, 0x53, 0x4d, 0x55, 0x58, 0x30, 0x4a, 0x64, 0x5a, 0x4c, 0x6d, 0x78, 0x65, 0x37, 0x72, 0x4c, 0x67, 0x71, 0x51, 0x63, 0x51, 0x41, 0x6e, 0x6b, 0x46, 0x69, 0x53, 0x4c, 0x34, 0x74, 0x4d, 0x79, 0x63, 0x4d, 0x77, 0x69, 0x63, 0x77, 0x52, 0x75, 0x72, 0x54, 0x4d, 0x4b, 0x4a, 0x45, 0x65, 0x37, 0x41, 0x62, 0x30, 0x71, 0x53, 0x4d, 0x48, 0x4e, 0x42, 0x72, 0x68, 0x33, 0x45, 0x78, 0x44, 0x67, 0x33, 0x64, 0x41, 0x58, 0x35, 0x4d, 0x67, 0x75, 0x58, 0x65, 0x6a, 0x79, 0x67, 0x50, 0x37, 0x47, 0x57, 0x76, 0x53, 0x42, 0x30, 0x5a, 0x54, 0x4b, 0x38, 0x55, 0x38, 0x33, 0x31, 0x35, 0x33, 0x5a, 0x6e, 0x39, 0x6a, 0x46, 0x70, 0x63, 0x35, 0x41, 0x36, 0x63, 0x54, 0x6d, 0x6a, 0x5a, 0x42, 0x59, 0x77, 0x6e, 0x78, 0x4b, 0x46, 0x7a, 0x36, 0x64, 0xf, 0x1, 0x11, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x62, 0x72]);
            var headerTable = new HPACKHeaderTable();
            var maxFrameSize = 2048u;
            var logger = NullLogger.Instance;
            Http2FrameHEADERSPayload headersPayload;

            // Act
            var result = Http2FrameReader.TryReadFrame(ref buffer, ref frame, maxFrameSize, out ReadOnlySequence<byte> payload);

            // Assert
            Assert.True(result);
            Assert.Equal(Http2FrameType.HEADERS, frame.FrameType);
            Assert.Equal(Http2FrameFlags.END_STREAM | Http2FrameFlags.END_HEADERS, frame.Flags);
            Assert.Equal(1077, frame.Length);
            Assert.Equal(1u, frame.StreamIdentifier);
            Assert.Equal(frame.Length, payload.Length);

            result = Http2FrameReader.TryReadHEADERSFramePayload(ref frame, payload, headerTable, out headersPayload, logger);

            // Assert
            Assert.True(result);
            Assert.NotNull(headersPayload);
            Assert.Equal(7, headersPayload.Headers.Count);
            Assert.Equal(":method", headersPayload.Headers[0].Name);
            Assert.Equal("GET", headersPayload.Headers[0].Value);
            Assert.Equal(":scheme", headersPayload.Headers[1].Name);
            Assert.Equal("http", headersPayload.Headers[1].Value);
            Assert.Equal(":authority", headersPayload.Headers[2].Name);
            Assert.Equal("localhost:9652", headersPayload.Headers[2].Value);
            Assert.Equal(":path", headersPayload.Headers[3].Name);
            Assert.Equal("/", headersPayload.Headers[3].Value);
            Assert.Equal("random-header1", headersPayload.Headers[4].Name);
            Assert.Equal("415k3WZQURrYrejmtgAWjWKZBHwPqk0r7XcRVwwnAiEr4tFCD6r2faQpBZZUFQ9xnRUMKF80AXEx1jCFM0fuPe5w3adXX3xM6mcEVp6Ftr3kEAK2m3iu4vKxD2LHvbJfQ4LmUkCyh1hSug2JUkTYg9eGtKaDu5R7P2ZgYwY6QXNSv8c4pbKK7NeKEcH7Em91LJFxqjqFiWdmtEye0R3HgL5GPd80dexCbY4BDapJ12F7u3Kempx04xpRAxeWpNz5favk884AqKHpEgCF3n8uB0jxYMxSjYS3qnXUgf9SXfZYL9gSwhN4q9yJU9UT33Una8ay7DRd7Dq0Sj7KQP1R2cMXDiiJMm0VQUJLXdKNrSuXSZg8GMa2aXHrmiCwUVL0HnFn0Sg3ttwEK9b79kcQvLqpm6nRc5AbTwQWHDbNdveMma3NhHMwJRrwufNCMGvaTqBnQE8V85VYqCxyngq1wAqgGVmHxXi8Yxu7C6ZiYDiYfqUka9FA", headersPayload.Headers[4].Value);
            Assert.Equal("random-header2", headersPayload.Headers[5].Name);
            Assert.Equal("0v6GE2xX6KkFy8Mv1wJ4jaS4WTRjuvnYj32DS3WrmnHSDK7WuvzdvSwVdj2h8guwNk9d7He2XSfqtTPDzReYQkd5jQBfMetCDdvdh9RPUfTqzjt1HTWN8bQeuRdKqN6wQvHfEkpicXZHUD2yFzha3h9V0zBrLxUxVBvJgE98fvF6yMwYhJNSXUTrJLjcTGh6egSCQzgLmRWkrAAmuwt96nX8takGHvu1vtixH69T4ieeJ0T90gtBMcEC8NwUTRuj5KYbLQtA3NK4EuPnP2KnveP8TXPTnM2vcbVUAAk1DP072WrE6DTBpDtweCj38H8tMZHyDBFCXucDk6kDvWWWFEQvXhU7vi90VgHBxkeNegz6k2bACYAv8kfdvE0uaSMUX0JdZLmxe7rLgqQcQAnkFiSL4tMycMwicwRurTMKJEe7Ab0qSMHNBrh3ExDg3dAX5MguXejygP7GWvSB0ZTK8U83153Zn9jFpc5A6cTmjZBYwnxKFz6d", headersPayload.Headers[5].Value);
            Assert.Equal("accept-encoding", headersPayload.Headers[6].Name);
            Assert.Equal("gzip, deflate, br", headersPayload.Headers[6].Value);
        }    
    }
}
